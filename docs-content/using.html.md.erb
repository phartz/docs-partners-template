---
title: Using the a9s Dedicated MongoDB
owner: Partners
---

This topic describes how to create and use a MongoDB service once the a9s
Dedicated MongoDB tile is installed.


##<a id='using'></a> Using the a9s Dedicated MongoDB within an application

To make use of the a9s Dedicated MongoDB within one of your
applications, you will have to do two things: **provision** a service instance
and **bind** it to your application. You can find [More here](https://docs.cloudfoundry.org/devguide/services/managing-services.html) on how to manage service instances.


When the tile is installed, you can see the *a9s-mongodb* and its service
plans appear in your Pivotal Cloud Foundry marketplace. Run `cf marketplace` to
see it listed.

```
$ cf marketplace
Getting services from marketplace in org test / space test as admin...
OK

service            plans                                                                                  description
a9s-mongodb        mongodb-single-small, mongodb-cluster-small, mongodb-single-big, mongodb-cluster-big   This is the anynines mongodb 32 service.
```

This means that you can create a MongoDB database that will be defined by one of
the given plans. For the purpose of this tutorial, we'll create a *mongodb-
single-small* service.


### Provisioning

A database can be provisioned with the `cf create-service` command (aliased
`cf cs`):

```
$ cf create-service a9s-mongodb mongodb-single-small my-mongodb-service
```

It can take a while for the service to be created. As the prompt tells you, you
can check the operation status with the commands either by displaying all
your services and their status with the `cf services` (aliased `cf s`) or by
checking specifically the status of your service, in our case with `cf service
my-mongodb-service`.


### Binding

Once your database is done being created, you can bind it to your app with the
`cf bind-service` command (aliased `cf bs`):

```
$ cf bind-service a9s-mongodb-app my-mongodb-service                                                                                                                  !10350
```

As the prompt explains it, you will need to restage or restart your application
to be able to use the database with respectivly the `cf restage` and `cf restart`
commands.


##<a id='deleting'></a> Deleting an a9s Dedicated MongoDB service instance

<p class="note">Before deleting your MongoDB service, i.e. database, think that all the data it
is containing will be lost.</p>

Before you can be able to delete your service, you will have to unbind it from
all the applications it was bound to.


### Unbinding

If we list our services, we see that my *my-mongodb-service* is bound to the *a9s-
mongodb-app* application.

```
$ cf service                                                                                                                                                                !10313
Getting services in org test / space test as admin...
OK

name                 service       plan                   bound apps        last operation
my-mongodb-service   a9s-mongodb   mongodb-single-small   a9s-mongodb-app   create succeeded
```


Unbinding works with the `cf unbind-service` command (aliased `cf us`),
which can take up to a few seconds:

```
$ cf unbind-service a9s-mongodb-app my-mongodb-service
```


### Deleting
Now that the service instance is not bound to any applications anymore, we can
delete it with the `cf delete-service` command (aliased `cf ds`):

```
$ cf delete-service my-mongodb-service                                                                                                                                !10318
```

The deletion of a service also can last a couple of minutes. You can check the
operation status the same way you can do it for the creation, either by checking
the status of all services with the `cf services` command or by checking the
status of your application, in our case with `cf service my-mongodb-service`.


##<a id='credentials'></a> Getting the credentials

Once your service is bound to your application, the credentials of your MongoDB
database can be found in the environment variables of the application. You can
display them with the `cf env` command. The credentials are to be found under
the [VCAP_SERVICES](https://docs.cloudfoundry.org/devguide/deploy-apps/environment-variable.html#VCAP-SERVICES) key.

```
$ cf env a9s-mongodb-app
Getting env variables for app a9s-mongodb-app in org test / space test as admin...
OK

System-Provided:
{
 "VCAP_SERVICES": {
  "a9s-mongodb": [
   {
    "credentials": {
     "default_database": "d22906",
     "hosts": [
      "d22906-mongod-avl1-0.node.dc1.a9svs:27017"
     ],
     "password": "a9sf0d07af6823b7684bd326c1c514f56f8341fd893",
     "uri": "mongodb://a9s-brk-usr-15b5ba10d0153256d9542bfb50e4009c6f62e635:a9sf0d07af6823b7684bd326c1c514f56f8341fd893@d22906-mongod-avl1-0.node.dc1.a9svs:27017/d22906",
     "username": "a9s-brk-usr-15b5ba10d0153256d9542bfb50e4009c6f62e635"
    },
    "label": "a9s-mongodb",
    "name": "my-mongodb-service",
    "plan": "mongodb-single-small",
    "tags": [
     "nosql",
     "database",
     "document store",
     "eventual consistent"
    ]
   }
  ]
 }
}
...
```

With this information, you could for instance, use the host, username and
password values with a MongoDB client to connect to the database.

